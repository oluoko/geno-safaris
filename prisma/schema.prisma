// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
}

model Destination {
  id              String   @id @default(uuid())
  title           String
  description     Json
  location        String
  headCountMin    Int
  headCountMax    Int
  durationLimit   Int // Duration in days
  amountPerHead   Float
  hasReturnFlight Boolean  @default(false) // Indicates if return flight is an option
  laptopImageUrl  String
  mobileImageUrl  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  bookings Booking[]
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  destinationId  String? // Optional: Null for personalized bookings
  customLocation String? // For personalized bookings
  startDate      DateTime
  endDate        DateTime
  headCount      Int
  returnFlight   Boolean
  personalized   Boolean  @default(false) // True for personalized bookings
  amount         Float? // Amount for the booking, set by the admin for personalized bookings
  status         Status   @default(PENDING)
  adminResponse  String? // Details provided by admin for personalized bookings
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  destination Destination? @relation(fields: [destinationId], references: [id]) // Nullable for custom bookings
  payment     Payment?
}

model Payment {
  id            String        @id @default(uuid())
  bookingId     String        @unique
  amount        Float
  method        PaymentMethod
  status        Status        @default(PENDING)
  transactionId String? // For Mpesa or Visa transaction tracking
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}

enum PaymentMethod {
  MPESA
  VISA
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}
