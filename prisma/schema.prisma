// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
}

model Tour {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  price       Float
  duration    Int // Duration in days
  imageUrl    String // Cover image URL for the tour
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  tourId    String
  status    status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  tour    Tour     @relation(fields: [tourId], references: [id])
  payment Payment?
}

model Payment {
  id            String        @id @default(uuid())
  bookingId     String        @unique
  amount        Float
  method        PaymentMethod
  status        status        @default(PENDING)
  transactionId String? // For Mpesa or Visa transaction tracking
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}

enum PaymentMethod {
  MPESA
  VISA
}

enum status {
  PENDING
  COMPLETED
  FAILED
}
